/*
 * Copyright (c) 2019 Telekom Deutschland AG
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'

apply from: "../gradle/task/quality.gradle"
apply from: "../gradle/task/code_coverage.gradle"
apply from: "../gradle/task/maven_push_library.gradle"

android {

    compileSdkVersion rootProject.ext.androidCompileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.androidMinSdkVersion
        targetSdkVersion rootProject.ext.androidTargetSdkVersion
        versionCode rootProject.ext.androidVersionCode
        versionName rootProject.ext.androidVersionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            useProguard false
        }
        debug {
            minifyEnabled false
            useProguard false
            testCoverageEnabled false
        }
    }

    externalNativeBuild {
        cmake {
            path 'src/main/jni/CMakeLists.txt'
        }
    }

    libraryVariants.all { variant ->
        if (variant.buildType.name == "debug") {
            def aptOutputDir = new File(buildDir, "generated/source/apt/${variant.unitTestVariant.dirName}")
            variant.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
        } else if (variant.buildType.name.toLowerCase().contains("release")) {
            artifactoryPublish.finalizedBy(incrementSdkVersion)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst 'protobuf.meta'
    }
}

dependencies {

    implementation "com.android.support:appcompat-v7:${androidSupportLibVersion}"

    testImplementation "org.hamcrest:hamcrest-library:${hamcrestVersion}"
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.hamcrest:hamcrest-core:${hamcrestVersion}"
    testImplementation "org.json:json:${jsonVersion}"
    testImplementation "org.powermock:powermock-api-mockito2:${powermockVersion}"
    testImplementation "org.powermock:powermock-module-junit4:${powermockVersion}"
    testImplementation "android.arch.core:core-testing:${architectureCoreTestingVersion}"

    androidTestImplementation "com.android.support.test.espresso:espresso-core:${espressoLibVersion}"

}
