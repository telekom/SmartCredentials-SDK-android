import java.util.regex.Matcher
import java.util.regex.Pattern

/*
 * Copyright (c) 2019 Telekom Deutschland AG
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
    include("**")
}

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is ->
        p.load(is)
    }
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = getEnvOrProperty('OSSRH_GPG_SECRET_KEY_ID')
    ext["signing.password"] = getEnvOrProperty('OSSRH_GPG_SECRET_KEY_PASSWORD')
    ext["signing.secretKeyRingFile"] = 'release.gpg'
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "axelnennker"
            name "Axel Nennker"
            email "Axel.Nennker@telekom.de"
        }
    }

    scm {
        url "https://github.com/telekom/SmartCredentials-SDK-android"
    }
}

publishing {
    group = "de.telekom.smartcredentials"
    version = rootProject.ext.androidVersionName
    repositories {
        maven {
            name = "MavenCentral"
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2")
            credentials {
                username = getEnvOrProperty('SONATYPE_USERNAME')
                password = getEnvOrProperty('SONATYPE_PASSWORD')
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId project.getGroup()
            artifactId project.getName()
            version = project.getVersion()

            String aarFileName = "$buildDir/outputs/aar/${project.getName()}-release-${version}.aar"
            if (new File(aarFileName).exists()) {
                artifact(aarFileName)
                artifact sourcesJar

                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', 'SmartCredentials is a programmer’s library, presenting a unified interface for various solutions and protocols used to authenticate, authorize and conduct any kind of transactions between a user or a user-facing app and services. It uses the abstraction of a credential, which can handily be made available to the user for choosing the right identity/ entitlement and authenticating themselves for appropriate security. On the ‘other end’ actual technological functions are structured in modules that can be ‘plugged’ in to the SmartCredentials core to extend and alter its behavior behind the unifying credentialing APIs.')
                    root.appendNode('name', 'Smart Credentials')
                    root.appendNode('url', 'https://github.com/telekom/SmartCredentials-SDK-android')
                    root.children().last() + pomConfig
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                    if (getCurrentFlavor() == 'debug') {
                        configurations.debugImplementation.allDependencies.each {
                            if (it.name != 'unspecified') {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }
                    if (getCurrentFlavor() == 'release') {
                        configurations.releaseImplementation.allDependencies.each {
                            if (it.name != 'unspecified') {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }
                }
            }
        }
    }
}

signing {
    required {gradle.taskGraph.hasTask("publications")}
    sign publishing.publications
}

def getCurrentFlavor() {
    String tskReqStr = getGradle().getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if (tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)")
    else
        pattern = Pattern.compile("generate(\\w+)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find())
        return matcher.group(1).toLowerCase()
    else {
        println "NO MATCH FOUND"
        return ""
    }
}

def getEnvOrProperty(String name, String fallback = null) {
    return System.getenv(name) ?: project.hasProperty(name) ? project[name] : fallback
}
